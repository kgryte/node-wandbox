#!/usr/bin/env node
'use strict';

// MODULES //

var fs = require( 'fs' );
var path = require( 'path' );
var parseArgs = require( 'minimist' );
var notifier = require( 'update-notifier' );
var pkg = require( './../package.json' );
var opts = require( './opts.json' );
var wandbox = require( './../lib' );


// VARIABLES //

var args;


// FUNCTIONS //

/**
* FUNCTION: onClose()
*	Callback invoked upon writing a file to `stdout`.
*
* @private
*/
function onClose() {
	process.exit( 0 );
}


// INIT //

process.title = pkg.name;
process.stdout.on( 'error', process.exit );


// PACKAGE UPDATES //

notifier( { 'pkg': pkg } ).notify();


// ARGUMENTS //

args = parseArgs( process.argv.slice( 2 ), opts );


// HELP //

if ( args.help ) {
	fs.createReadStream( path.join( __dirname, 'usage.txt' ) )
		.pipe( process.stdout )
		.on( 'close', onClose );
    return;
}


// VERSION //

if ( args.version ) {
	console.log( pkg.version );
	return;
}


// OPTIONS //

opts = {};

if ( args.compiler ) {
	opts.compiler = args.compiler;
}
if ( args.files ) {
	opts.files = args.files.split( ',' );
}
if ( args.options ) {
	opts.options = args.options.split( ',' );
}
if ( args.stdin ) {
	opts.stdin = args.stdin;
}
if ( args[ 'compile-options' ] ) {
	opts.compileOptions = args[ 'compile-options' ].split( ',' );
}
if ( args[ 'runtime-options' ] ) {
	opts.runtimeOptions = args[ 'runtime-options' ].split( ',' );
}
if ( args.permalink ) {
	opts.permalink = args.permalink;
}


// WANDBOX //

wandbox( args._[0], opts, clbk );

/**
* FUNCTION: clbk( error, results )
*	Callback invoked upon receiving a request response.
*
* @private
* @param {Error|Null} error - error object
* @param {Object} results - request results
* @returns {Void}
*/
function clbk( error, results ) {
	var str;
	if ( error ) {
		process.stderr.write( error.message+'\n', 'utf8' );
		return process.exit( 1 );
	}
	// Write all results to `stderr`:
	str = JSON.stringify( results );
	process.stderr.write( str+'\n', 'utf8' );

	// Write the `program_message` to `stdout`:
	if ( results.program_message ) {
		str = results.program_message;
		process.stdout.write( str+'\n', 'utf8' );
	}
	process.exit( 0 );
}
